// vim:filetype=groovy:tabstop=4:shiftwidth=4:expandtab:
@Library(['vpl']) _

properties([
  parameters([
    booleanParam(
        name:         'NPM_PUBLISH',
        defaultValue: false,
        description:  'Make it true if you want to publish npm build to npm repo'
        )
    ]),
    pipelineTriggers([
        pollSCM('')
    ]),
    buildDiscarder(
        logRotator(
            daysToKeepStr: '20',
            artifactDaysToKeepStr: '60'
        )
    ),
    disableConcurrentBuilds()
])

timeout(45) {
    String buildTag = "${env.BUILD_TAG}"
    String nodeLabel = env.BUILD_TAG.reverse().take(63).reverse().replaceAll('%2F', '-').replaceAll(/^\-/, '')
    String imageName = "artifactory-pyml-auto-images-public.cto.veritas.com/pyml-npm-slave:v7"
    podTemplate(
        label: nodeLabel,
        volumes: [
            secretVolume(
                secretName: 'dockerhost-secret-files',
                // A docker login will store auth tokens at ~/.docker/config.json
                // If this is a secretVolume, kubernetes may update the volume to the state it knows of
                // That means config.json may get lost
                // Mount to another path instead and expose using DOCKER_CERT_PATH
                mountPath: '/home/jenkins/.dockercert'
            )
        ],
        containers: [
            containerTemplate(
                name: 'jnlp',
                image: imageName,
                // alwaysPullImage: true,
                args: '${computer.jnlpmac} ${computer.name}',
                envVars: [
                    envVar(key: "DOCKER_CERT_PATH", value: "/home/jenkins/.dockercert"),
                    envVar(key: "DOCKER_TLS_VERIFY", value: "${env.SHARED_DOCKER_TLS_VERIFY}"),
                    envVar(key: "DOCKER_HOST", value: "${env.SHARED_DOCKER_HOST}"),
                    envVar(key: "DOCKER_API_VERSION", value: "${env.SHARED_DOCKER_API_VERSION}")
                ]
            )
        ]
    ) {

        node(nodeLabel) {

            try {

                stage("Clone repo") {

                    gitCredentialsId = "pyml-creds-id"
                    gitRepoUrl = "https://stash.veritas.com/scm/crtx/cortex-search-ui.git"
                    gitBranchName = env.BRANCH_NAME

                    gitRefs = cloneRepository {
                        gitRepoUrl       = this.gitRepoUrl
                        gitCredentialsId = this.gitCredentialsId
                        gitBranchName    = this.gitBranchName
                    }

                    scmTag = gitRefs.tag ?: gitRefs.branch
                    sh "git config user.email 'DL-VTAS-DUB-PROPHECY@veritas.com'"
                    sh "git config user.name 'proph.mgmt.pipeline'"
                } // end stage

                stage("Lint Analysis") {
                    sh """
                        npm install
                        ng lint
                     """
                } //end stage

                stage("Test & Build Project") {
                    sh """
                        ng test search-lib --watch=false
                        ng build search-lib
                     """
                } // end stage

                stage("Publish to NPM") {
                    if (params.NPM_PUBLISH && env.BRANCH_NAME == 'master') {

                        // Bump the version number
                        withCredentials([usernamePassword(credentialsId: 'pyml-creds-id', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                               sh("git config user.email 'DL-VTAS-DUB-PROPHECY@veritas.com'")
                               sh("git config credential.username ${env.GIT_USERNAME}")
                               sh("git config credential.helper '!f() { echo password=\$GIT_PASSWORD; }; f'")
                               sh("cd projects/search-lib && npm version patch")
                               sh("git add -A && git commit -m 'version update'")
                               sh("GIT_ASKPASS=true git push -f origin HEAD:${env.BRANCH_NAME}")
                               sh("cd ../../")
                        }

                        def server = Artifactory.server 'cto-artifactory'
                        def npmAuthUrl = server.getUrl() + "/api/npm/auth"

                        def npmAuthResponse = httpRequest(
                            authentication: "pyml-creds-id",
                            url: npmAuthUrl
                          )

                        def currentNpmrcContents = fileExists(".npmrc") ? readFile(file: ".npmrc"): ""

                        writeFile(file: ".npmrc", text: currentNpmrcContents + "\n" + npmAuthResponse.content)

                        def artifactoryNpmRegistryUrl = server.getUrl() + "/api/npm/pyml-auto-npm-virtual"
                        sh "npm publish dist/search-lib --registry ${artifactoryNpmRegistryUrl}"

                    }
                } // end stage

                stage("Package Project & docker Image") {
                    def version = 'unknown'
                    def tag = 'unknown'
                    GIT_COMMIT_HASH = sh (
                        script: "git reflog show origin/${env.BRANCH_NAME} --pretty=\'%h\' -n 1",
                        returnStdout: true
                    ).trim()
                    GIT_COMMIT_DATE = sh (
                        script: "git reflog show origin/${env.BRANCH_NAME} --pretty=\'%gd\' --date=format:%Y%m%d%H%M -n 1",
                        returnStdout: true
                    ).trim().replace("origin/${env.BRANCH_NAME}@{",'').replace('}','')
                    if(env.BRANCH_NAME == 'master') {
                        version = 'latest'
                    } else if(env.BRANCH_NAME.startsWith('release/')) {
                        def name = env.BRANCH_NAME
                        name = name.replace('release/','')
                        name = name.replace('-','.').replace('_','.')
                        version = "${name}-latest" 
                        tag = "${name}-${GIT_COMMIT_DATE}-${GIT_COMMIT_HASH}" //1.0-201811011054-ldjhfer
                    } else {
                        def name = env.BRANCH_NAME
                        name = name.replace('bugfix/','').replace('feature/','').replace('hotfix/','')
                        name = name.replace('-','.').replace('_','.')
                        version = name.substring(0,Math.min(119, name.length() - 1)) + '-' + env.BUILD_ID
                    }
                    docker.withRegistry("https://artifactory-pyml-auto-images-snapshots.cto.veritas.com", "pyml-creds-id") {
                        def customImage = docker.build("artifactory-pyml-auto-images-snapshots.cto.veritas.com/cortex-search-ui:$version")
                        if(env.BRANCH_NAME == 'master' ) {
                            customImage.push()
                        } else if (env.BRANCH_NAME.startsWith('release/')) {
                            customImage.push()
                            customImage.push(tag)
                            sh "docker rmi artifactory-pyml-auto-images-snapshots.cto.veritas.com/cortex-search-ui:$tag"
                        }
                        // Clean up image tagged using commit
                        sh "docker rmi artifactory-pyml-auto-images-snapshots.cto.veritas.com/cortex-search-ui:$version"
                    }
                }
            }
            catch(IllegalStateException ex) {
                // This is thrown from cloneRepository step in case of intermediate commit build
                currentBuild.result = currentBuild.result ?: "NOT_BUILT"
                println ex.getMessage()
            }
            catch(Exception e) {
                // If there was an exception thrown, the build failed
                currentBuild.result = "FAILURE"
                println e.getMessage()
                throw e

            } finally {

                stage("Run post-build tasks") {

                    resetScm {}

                    if (currentBuild.result != "NOT_BUILT") {
                        notifyBuild {
                            // Use your team's DL here
                            postDataToELK  = true
                            projectContact = "DL-VTAS-DUB-PROPHECY@veritas.com"
                        }
                    }
                } // end stage
            } // end finally
        } // end node
    } // end podTemplate
} // end timeout

